#include<bits/stdc++.h>
using namespace std;

struct QueueNode
{
    int data;
    QueueNode *next;
    QueueNode(int a)
    {
        data = a;
        next = NULL;
    }
};

struct MyQueue {
    QueueNode *front;
    QueueNode *rear;
    void push(int);
    int pop();
    MyQueue() {front = rear = NULL;}
};



int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        MyQueue *sq = new MyQueue();

        int Q;
        cin>>Q;
        while(Q--){
        int QueryType=0;
        cin>>QueryType;
        if(QueryType==1)
        {
            int a;
            cin>>a;
            sq->push(a);
        }else if(QueryType==2){
            cout<<sq->pop()<<" ";

        }
        }
        cout<<endl;
    }
    }
// } Driver Code Ends


/* Structure of a node in Queue
struct QueueNode
{
    int data;
    QueueNode *next;
    QueueNode(int a)
    {
        data = a;
        next = NULL;
    }
};

And structure of MyQueue
struct MyQueue {
    QueueNode *front;
    QueueNode *rear;
    void push(int);
    int pop();
    MyQueue() {front = rear = NULL;}
}; */

/* The method push to push element into the queue*/
void MyQueue:: push(int x)
{
    
    if(rear==NULL){
        rear=new QueueNode(x);
        front=rear;
        
    }else{
        QueueNode *temp=new QueueNode(x);
    // add in last
    rear->next=temp;
    rear=temp;
    }
        // Your Code
}

/*The method pop which return the element
  poped out of the queue*/
int MyQueue :: pop()
{
    
    QueueNode *temp;
    temp=front;
    
    if(temp==NULL){
        return  -1;
    }
    if(temp->next!=NULL){
        temp=temp->next;
        int k=front->data;
        delete(front);
        front=temp;
        return k;
    }
    else{
        int k=front->data;
        delete(front);
        front=rear=NULL;
        return k;
    }
    
        // Your Code       
}
